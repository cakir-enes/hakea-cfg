#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>



#define DEF 0
#define NUM_FN 1
#define KOMBO(name, keypress, keypos) \
combo_##name {                        \
	timeout-ms = <25>;                \
	bindings = <keypress>;            \
	key-positions = <keypos>;         \
};
#define MEH(key) LC(LA(LS(key)))

&mt {
	tapping-term-ms = <200>;
};

/ {

    behaviors {

        ht: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "holdtap";
            #binding-cells = <2>;
            tapping_term_ms = <100>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

  			grescx: grave_escapex {
             compatible = "zmk,behavior-mod-morph";
             label = "GRAVE_ESCAPEX";
             #binding-cells = <0>;
             bindings = <&kp ESC>, <&kp GRAVE>;
             keep-mods = <(MOD_LGUI)>;
             mods = <(MOD_LGUI|MOD_LSFT)>;
         };


        ht_p: holdtap_p {
						compatible = "zmk,behavior-hold-tap";
						label = "holdtap_p";
						#binding-cells = <2>;
						tapping_term_ms = <200>;
						flavor = "hold-preferred";
						bindings = <&kp>, <&grescx>;
				};

				ht_t: holdtap_t {
						compatible = "zmk,behavior-hold-tap";
						label = "holdtap_t";
						#binding-cells = <2>;
						tapping_term_ms = <200>;
						flavor = "tap-preferred";
						bindings = <&kp>, <&grescx>;
				};

         td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&ht LS(F14) LS(F13)>, <&kp LS(15)>, <&kp STAR>;
        };


        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&ht RBKT LBKT>, <&kp EXCL>, <&kp EXCL>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&ht RBRC LBRC>, <&kp GRAVE>, <&kp GRAVE>;
        };

    };

    combos {
        compatible = "zmk,combos";

    KOMBO(at, &kp AT, 14 26)

    KOMBO(enter, &kp ENTER, 26 27)

    KOMBO(lpar, &kp LPAR, 31 32)

    KOMBO(rpar, &kp RPAR, 31 45)

    KOMBO(lbkt, &kp LBKT, 32 33)

    KOMBO(rbkt, &kp RBKT, 32 46)

    KOMBO(lbrc, &kp LBRC, 31 33)

    KOMBO(rbrc, &kp RBRC, 45 47)

    KOMBO(colon, &kp COLON, 45 32)

    KOMBO(equal, &kp EQUAL, 31 20)

    KOMBO(star, &kp STAR, 19 31)

    KOMBO(underscore, &kp UNDERSCORE, 19 20)

    KOMBO(nexttab, &kp LC(TAB), 39 40)

    KOMBO(prevtab, &kp LC(LS(TAB)), 38 39)

    KOMBO(plus, &kp PLUS, 29 28)

    KOMBO(caret, &kp CARET, 18 30)

    KOMBO(excl, &kp EXCL, 14 15)

    KOMBO(amps, &kp AMPS, 16 15)

    KOMBO(pipe, &kp PIPE, 16 14)

    KOMBO(hash, &kp HASH, 15 27)

    KOMBO(grave, &kp GRAVE, 16 28)

    KOMBO(esc, &kp ESC, 28 27)

    KOMBO(bslh, &kp BSLH, 26 28)

    KOMBO(dollar, &kp DOLLAR, 17 29)

    KOMBO(minus, &kp MINUS, 40 27)

    KOMBO(tilde, &kp TILDE, 28 15)

    KOMBO(perc, &kp PERC, 45 46)

    KOMBO(semicol, &kp SEMICOL, 46 47)

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "def";
// ------------------------------------------------------------------------------------------------------------
// |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <

&kp LS(F1)   &kp LS(F2) &kp LS(F3)   &kp LS(F4)   &kp LS(F5)    &kp LS(F6)                &kp LS(F7)    &kp LS(F8)    &kp LS(F9)   &kp LS(F10)  &kp LS(F11) &kp LS(F12)

&kp TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                       							    &kp Y  &kp U     &kp I     &kp O    &kp P    &kp LG(TAB)

&ht LCTRL ESC   &kp A  &kp S    &kp D    &kp F     &kp G                       	      		&kp H  &kp J     &kp K     &kp L    &kp BSPC &kp SQT

&ht LSHFT GRAVE &kp Z  &kp X    &kp C    &kp V     &kp B  &kp C_MUTE          &td0        &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RSHFT

                 &caps_word &kp LALT &kp LGUI &lt 1 SPACE  &mt LCTRL SPACE   &lt 2 RET    &lt 1 RET   &kp RCTRL &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
        label = "lwr";
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |   0(    |  = | |  - c |  + c  |  { =  |  } -  |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&trans    &trans        &trans       &trans          &trans       &trans                               &trans    &trans       &trans          &trans      &trans       &trans       
&trans    &kp MEH(Q)    &kp LG(W)    &kp MEH(E)      &kp LG(R)    &kp LG(T)                            &kp EXCL  &kp LG(TAB)  &trans        &trans      &trans       &trans
&trans    &kp MEH(A)  &kp MEH(S)    &kp MEH(D)    &kp MEH(F)  &kp LG(SPACE)                         &kp LEFT  &kp DOWN     &kp UP          &kp RIGHT   &kp LA(BSPC) &kp PIPE
&trans    &kp LG(Z)      &kp LG(X)      &kp LG(C)    &kp LG(V)  &kp MEH(B)  &trans          &trans  &kp HOME  &kp LA(LEFT) &kp LA(RIGHT)   &kp END     &trans       &trans
                    &trans    &trans      &kp MEH(N1)    &kp MEH(N2)    &kp MEH(N3)   &trans &trans    &trans   &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
          label = "rse";
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP | NW   |   ^   |  PW  |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&out OUT_BLE &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                &trans     &trans     &trans    &trans    &trans      &bt BT_CLR
&kp LC(LALT) &kp LEFT      &kp KP_N7    &kp KP_N8    &kp KP_N9       &kp PLUS                          &kp F12    &kp F7     &kp F8    &kp F9    &kp N0      &trans
&kp LC(LALT) &kp RIGHT     &kp KP_N4    &kp KP_N5    &kp KP_N6       &kp MINUS                         &kp F11    &kp F4     &kp F5    &kp F6    &kp SEMI    &ext_power EP_ON
&out OUT_TOG &kp K_UNDO    &kp KP_N1    &kp KP_N2    &kp KP_N3       &kp KP_N0        &trans   &trans     &kp F10    &kp F1     &kp F2    &kp F3    &kp AT      &ext_power EP_OFF
                           &trans    &trans    &trans       &trans        &trans   &trans     &trans     &trans     &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
